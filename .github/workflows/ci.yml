name: Manual Deploy

# ✅ 手动触发
on:
  workflow_dispatch:
    inputs:
      environment:
        description: '选择部署环境'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - uat
          - prod

jobs:
  build:
    name: 🔨 Build & Push Image
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set_output.outputs.image_tag }}
    steps:
      - name: Checkout 源码
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: 安装依赖 & 打包
        run: |
          npm ci
          npm run build

      - name: 登录镜像仓库
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 构建并推送镜像
        run: |
          ENV="${{ github.event.inputs.environment }}"
          IMAGE="${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_NAMESPACE }}/my-frontend:$ENV"
          docker build -t "$IMAGE" .
          docker push "$IMAGE"
          echo "IMAGE_TAG=$IMAGE" >> $GITHUB_ENV

      - name: 设置输出
        id: set_output
        run: echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy:
    name: 🚀 部署到指定环境
    needs: build
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: SSH & 部署
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            ENV="${{ github.event.inputs.environment }}"
            PORT="8081"
            if [ "$ENV" = "uat" ]; then PORT="8082"; fi
            if [ "$ENV" = "dev" ]; then PORT="8083"; fi

            IMAGE="${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_NAMESPACE }}/my-frontend:$ENV"
            echo "Deploying $IMAGE to port $PORT"

            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }} ${{ secrets.DOCKER_REGISTRY }}
            docker pull $IMAGE
            docker stop my-frontend || true
            docker rm my-frontend || true
            docker run -d --name my-frontend -p ${PORT}:${PORT} $IMAGE
