# name: PR Build & Deploy

# # 只在任何 PR 打开/更新时触发
# on:
#   pull_request:

# jobs:
#   # 一、Build Job：拉代码→npm build→打镜像→push Registry
#   build:
#     name: 🔨 Build & Push Image
#     runs-on: ubuntu-latest
#     outputs:
#       image_tag: ${{ steps.build_image.outputs.image_tag }}  # ✅ 指定输出来源
#     steps:
#       - name: Checkout 源码
#         uses: actions/checkout@v4

#       - name: Setup Node.js
#         uses: actions/setup-node@v3
#         with:
#           node-version: "18"

#       - name: 安装 & 打包
#         run: |
#           npm ci
#           npm run build

#       - name: 登录镜像仓库
#         uses: docker/login-action@v2
#         with:
#           registry: ${{ secrets.DOCKER_REGISTRY }}
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - name: 构建并推送镜像
#         id: build_image  # ✅ 关键：加上 id 才能被 outputs 使用
#         run: |
#           TAG_NAME="${{ github.event.pull_request.base.ref }}"
#           SHA_TAG="${{ github.sha }}"
#           IMAGE_BASE="${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_NAMESPACE }}/my-frontend"
#           IMAGE_SHA="$IMAGE_BASE:$SHA_TAG"
#           IMAGE_TAG="$IMAGE_BASE:$TAG_NAME"

#           echo "Building Docker image: $IMAGE_SHA"
#           docker build -t "$IMAGE_SHA" -t "$IMAGE_TAG" .

#           echo "Pushing images..."
#           docker push "$IMAGE_SHA"
#           docker push "$IMAGE_TAG"

#           echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT  # ✅ 正确传输出口

#   deploy-dev:
#     name: 🚀 Deploy to Dev
#     needs: build
#     runs-on: ubuntu-latest
#     # 只有当 PR 目标分支是 dev 时才触发
#     if: ${{ github.event.pull_request.base.ref == 'dev' }}
#     # 关联 GitHub Environment (自动拉 dev 里的 Secrets、走审批)
#     environment: dev
#     steps:
#       - name: SSH & 部署 Dev
#         uses: appleboy/ssh-action@v0.1.7
#         with:
#           host: ${{ secrets.SSH_HOST }}
#           username: ${{ secrets.SSH_USER }}
#           key: ${{ secrets.SSH_KEY }}
#           script: |
#             IMAGE=${{ needs.build.outputs.image_tag }}
#             docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }} ${{ secrets.DOCKER_REGISTRY }}
#             docker pull $IMAGE
#             # 先停止并删除旧容器（容器名自己改）
#             docker stop my-frontend || true
#             docker rm my-frontend || true
#             docker run -d --name my-frontend -p 8083:8083 $IMAGE

#   deploy-uat:
#     name: 🚀 Deploy to UAT
#     needs: build
#     runs-on: ubuntu-latest
#     if: ${{ github.event.pull_request.base.ref == 'uat' }}
#     environment: uat
#     steps:
#       - name: SSH & 部署 UAT
#         uses: appleboy/ssh-action@v0.1.7
#         with:
#           host: ${{ secrets.SSH_HOST }}
#           username: ${{ secrets.SSH_USER }}
#           key: ${{ secrets.SSH_KEY }}
#           script: |
#             IMAGE=${{ needs.build.outputs.image_tag }}
#             docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }} ${{ secrets.DOCKER_REGISTRY }}
#             docker pull $IMAGE
#             docker stop my-frontend || true
#             docker rm my-frontend || true
#             docker run -d --name my-frontend -p 8082:8082 $IMAGE

#   # 四、Deploy 到 prod
#   deploy-prod:
#     name: 🚀 Deploy to Prod
#     needs: build
#     runs-on: ubuntu-latest
#     # 假设主分支 main 用于 prod
#     if: ${{ github.event.pull_request.base.ref == 'main' }}
#     environment: prod
#     steps:
#       - name: SSH & 部署 Prod
#         uses: appleboy/ssh-action@v0.1.7
#         env:
#           IMAGE: ${{ needs.build.outputs.image_tag }}
#         with:
#           host: ${{ secrets.SSH_HOST }}
#           username: ${{ secrets.SSH_USER }}
#           key: ${{ secrets.SSH_KEY }}
#           script: |
#             echo "Image is: $IMAGE"
#             docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }} ${{ secrets.DOCKER_REGISTRY }}
#             docker pull $IMAGE
#             docker stop my-frontend || true
#             docker rm my-frontend || true
#             docker run -d --name my-frontend -p 8081:8081 $IMAGE

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.build_image.outputs.image_tag }}
    steps:
      - name: Set Image Tag
        id: build_image
        run: |
          echo "image_tag=my-registry.com/myapp:dev" >> $GITHUB_OUTPUT

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Show Output
        run: echo "Image is: ${{ needs.build.outputs.image_tag }}"
