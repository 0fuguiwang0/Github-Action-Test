name: CI Workflow  # 定义工作流的名称

on:
  pull_request:  # 触发条件为 Pull Request
    branches:
      - main  # 仅在对 main 分支的 Pull Request 时触发

jobs:
  build:  # 定义一个名为 build 的作业
    runs-on: ubuntu-latest  # 在最新的 Ubuntu 环境中运行

    steps:  # 定义该作业中的一系列步骤
      - name: Checkout code  # 步骤名称
        uses: actions/checkout@v2  # 使用 GitHub Actions 提供的 checkout 动作来检出代码

      - name: Set up Node.js  # 设置 Node.js 环境
        uses: actions/setup-node@v2  # 使用 Node.js 设置动作
        with:
          node-version: '16'  # 指定 Node.js 版本为 16

      - name: Install dependencies  # 安装项目依赖
        run: npm install  # 运行 npm install 命令

      - name: Run tests  # 运行测试
        run: npm test -- --watchAll=false  # 执行测试，避免持续监听模式

      - name: Build project  # 构建项目
        run: npm run build  # 运行构建命令

  deploy:  # 定义一个名为 deploy 的作业
    runs-on: ubuntu-latest  # 在最新的 Ubuntu 环境中运行
    needs: build  # 该作业依赖于 build 作业的成功完成
    if: github.event.pull_request.merged == true  # 仅当 Pull Request 被合并时才执行
    environment: production  # 指定要部署的环境

    steps:  # 定义该作业中的步骤
      - name: Checkout code  # 再次检出代码
        uses: actions/checkout@v2  # 使用同样的 checkout 动作

      - name: Deploy to Cloud  # 云端部署步骤
        env:  # 定义环境变量
          ENVIRONMENT: ${{ github.event.deployment.environment }}  # 从环境中获取环境变量
          DOCKER_USERNAME: ${{ secrets[github.event.deployment.environment + '_DOCKER_USERNAME'] }}  # 根据环境选择 Docker 用户名
          DOCKER_PASSWORD: ${{ secrets[github.event.deployment.environment + '_DOCKER_PASSWORD'] }}  # 根据环境选择 Docker 密码
        run: |  # 运行多行命令
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin  # 登录 Docker
          docker build -t my-app:$ENVIRONMENT .  # 构建 Docker 镜像
          docker push my-app:$ENVIRONMENT  # 推送镜像到 Docker Hub

      - name: SSH to server and pull image  # SSH 到服务器并拉取镜像
        env:  # 定义环境变量
          SSH_PRIVATE_KEY: ${{ secrets[github.event.deployment.environment + '_SSH_PRIVATE_KEY'] }}  # 根据环境选择 SSH 私钥
          SERVER_IP: ${{ secrets[github.event.deployment.environment + '_SERVER_IP'] }}  # 根据环境选择服务器 IP 地址
          ENVIRONMENT: ${{ github.event.deployment.environment }}  # 从环境中获取环境变量
        run: |  # 运行多行命令
          mkdir -p ~/.ssh  # 创建 SSH 目录
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa  # 将私钥写入文件
          chmod 600 ~/.ssh/id_rsa  # 设置私钥文件权限
          ssh -o StrictHostKeyChecking=no user@$SERVER_IP "docker pull my-app:$ENVIRONMENT && docker-compose up -d"  # SSH 连接并拉取镜像，启动服务