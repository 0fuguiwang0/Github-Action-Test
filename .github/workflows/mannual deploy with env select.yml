name: Manual Build & Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - uat
          - prod

jobs:
  build_and_deploy:
    name: 🔨 Build, Push & Deploy to ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest

    # 关键：绑定到 GitHub Environment，用于环境变量隔离
    environment: ${{ github.event.inputs.environment }}

    steps:
      - name: Checkout 源码
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: 安装依赖 & 构建
        run: |
          npm ci
          npm run build

      - name: 登录镜像仓库
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 构建并推送镜像
        id: build_image
        run: |
          ENV="${{ github.event.inputs.environment }}"
          case $ENV in
            prod)
              DOCKERFILE="Dockerfile.prod"
              ;;
            uat)
              DOCKERFILE="Dockerfile.uat"
              ;;
            dev)
              DOCKERFILE="Dockerfile.dev"
              ;;
            *)
              echo "Unknown environment: $ENV"
              exit 1
              ;;
          esac

          IMAGE_BASE="${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_NAMESPACE }}/my-frontend"
          IMAGE_TAG="$IMAGE_BASE:$ENV"

          echo "Building Docker image with $DOCKERFILE for environment $ENV"
          docker build -f $DOCKERFILE -t "$IMAGE_TAG" .

          echo "Pushing image $IMAGE_TAG..."
          docker push "$IMAGE_TAG"

          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: SSH & 部署到服务器
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            IMAGE=${{ steps.build_image.outputs.image_tag }}
            echo "Deploying Image: $IMAGE"

            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }} ${{ secrets.DOCKER_REGISTRY }}
            docker pull $IMAGE

            docker stop my-frontend || true
            docker rm my-frontend || true

            case "${{ github.event.inputs.environment }}" in
              prod)
                PORT=8081
                ;;
              uat)
                PORT=8082
                ;;
              dev)
                PORT=8083
                ;;
              *)
                echo "Invalid environment"
                exit 1
                ;;
            esac

            # 宿主机端口映射容器内部对应端口
            docker run -d --name my-frontend -p $PORT:$PORT $IMAGE
